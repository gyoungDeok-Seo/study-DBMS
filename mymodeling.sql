/*

   회원   주문   상품
   --------------------
   아이디P   주문번호P   상품번호P
   --------------------
   비밀번호   주문날짜   상품명
   이름   아이디F   가격
   주소   상품번호F   재고량
   이메일U
   생일

*/
CREATE TABLE TBL_USER(
	ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
	USER_ID VARCHAR2(1000) UNIQUE NOT NULL,
	USER_PASSWORD NUMBER NOT NULL,
	USER_ADDRESS VARCHAR2(1000)NOT NULL,
	USER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
	USER_BIRTH DATE
);

CREATE TABLE TBL_PRODUCT(
	ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_NAME VARCHAR2(225) NOT NULL,
	PRODUCT_PRICE NUMBER DEFAULT 0,
	PRODUCR_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_ORDER(
	ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
	ORDER_DATE DATE DEFAULT CURRENT_TIMESTAMP,
	USER_ID NUMBER,
	PRODUCT_ID NUMBER,
	CONSTRAINT FK_ORDER_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID),
	CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
	REFERENCES TBL_PRODUCT(ID)
);
DROP TABLE TBL_ORDER;
/*
 * 요구 사항
 * 
 * 커뮤니티 게시판을 만들고 싶어요.
 * 게시판에는 게시글 제목과 게시글 내용, 작성한 시간, 작성자가 있고,
 * 게시글에는 댓글이 있어서 댓글 내용들이 나와야 해요
 * 작성자는 회원(TBL_USER)정보를 그대로 사용해요.
 * 댓글에도 작성자가 필요해요.
 * 
 * 
 */

CREATE TABLE TBL_POST(
	ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
	POST_TITLE VARCHAR2(225) NOT NULL,
	POST_CONTENT VARCHAR2(1000) NOT NULL,
	POST_CREATE_DATE DATE DEFAULT CURRENT_TIMESTAMP,
	USER_ID NUMBER,
	CONSTRAINT FK_POST_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID)
);

CREATE TABLE TBL_REPLAY(
	ID NUMBER CONSTRAINT PK_REPLAY PRIMARY KEY,
	REPLAY_CONTENT VARCHAR2(1000) NOT NULL,
	USER_ID NUMBER,
	POST_ID NUMBER,
	CONSTRAINT FK_REPLAY_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID),
	CONSTRAINT FK_REPLAY_POST FOREIGN KEY(POST_ID)
	REFERENCES TBL_POST(ID)
);

/*
 * 요구사항
 * 
 * 마이페이지에서 회원 프로필을 구현하고 싶습니다.
 * 회원당 프로필을 여러 개 설정할 수 있고 
 * 대표 이미지로 선택된 프로필만 화면에 보여주고 싶습니다.
 * 
 */

CREATE TABLE TBL_PROFILE(
	ID NUMBER CONSTRAINT PK_PROFILE PRIMARY KEY,
	PROFILE_ORIGINAL_NAME VARCHAR2(1000) NOT NULL,
	PROFILE_SYSTEM_NAME VARCHAR2(1000) NOT NULL,
	PROFILE_REPRESENTARIVE VARCHAR2(1000) DEFAULT 'NONE',
	USER_ID NUMBER,
	CONSTRAINT FK_PROFILE_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID)
);

/*
   1.학사 관리 시스템에서 학생과 교수가 존재
   2.학생은 학번, 이름, 전공, 학년 등
   3.교수는 교수 번호, 이름, 전공, 직위 등
   4.과목은 고유한 과목 번호, 과목명, 학점 등
   6.학생은 여러 개의 과목을 수강가능
   7.교수는 여러 개의 과목을 강의가능
   8.학생이 수강한 과목은 성적이 기록됩니다. 
*/

CREATE TABLE TBL_STUDENT(
	ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
	STUDENT_NAME VARCHAR2(1000) NOT NULL,
	STUDENT_MAJOR VARCHAR2(1000) NOT NULL,
	STUDENT_GRADE NUMBER DEFAULT 1
);

CREATE TABLE TBL_PROFESSOR(
	ID NUMBER CONSTRAINT PK_PROFESSOR PRIMARY KEY,
	PROFESSOR_NAME VARCHAR2(1000) NOT NULL,
	PROFESSOR_MAJOR VARCHAR2(1000) NOT NULL,
	PROFESSOR_POSITION VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_SUBJECT(
	ID NUMBER CONSTRAINT PK_SUBJECT PRIMARY KEY,
	SUBJECT_NAME VARCHAR2(1000) UNIQUE NOT NULL,
	SUBJECT_GRADE NUMBER DEFAULT 0
);

CREATE TABLE TBL_STUDENT_SUBJECT(
	ID NUMBER CONSTRAINT PK_STUDENT_SUBJECT PRIMARY KEY,
	STUDENT_ID NUMBER,
	SUBJECT_ID NUMBER,
	CONSTRAINT FK_STUDENT_SUBJECT_STUDENT FOREIGN KEY(STUDENT_ID)
	REFERENCES TBL_STUDENT(ID),
	CONSTRAINT FK_STUDENT_SUBJECT_SUBJECT FOREIGN KEY(SUBJECT_ID)
	REFERENCES TBL_SUBJECT(ID)
);

CREATE TABLE TBL_PROFESSOR_SUBJECT(
	ID NUMBER CONSTRAINT PK_PROFESSOR_SUBJECT PRIMARY KEY,
	PROFESSOR_ID NUMBER,
	SUBJECT_ID NUMBER,
	CONSTRAINT FK_PROFESSOR_SUBJECT_PROFESSOR FOREIGN KEY(PROFESSOR_ID)
	REFERENCES TBL_PROFESSOR(ID),
	CONSTRAINT FK_PROFESSOR_SUBJECT_SUBJECT FOREIGN KEY(SUBJECT_ID)
	REFERENCES TBL_SUBJECT(ID)
);

/*
 * 요구사항 
 * 
 * 대 카테고리, 소 카테고리가 필요해요. 
 * 
 * */

CREATE TABLE TBL_CATEGORY_A(
	ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
	CATEGORY_A_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CATEGORY_B(
	ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
	CATEGORY_B_NAME VARCHAR2(1000) NOT NULL,
	CATEGORY_A_ID NUMBER,
	CONSTRAINT FK_CATEGORY_B_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
	REFERENCES TBL_CATEGORY_A(ID)
);

/*
 * 요구 사항
 * 
 * 회의실 예약 서비스를 제작하고 싶습니다.
 * 회원별로 등급이 존재하고 사무실마다 회의실이 여러 개 있습니다.
 * 회의실 이용 가능 시간은 파트 타임으로서 여러 시간대가 존재합니다.
 * 
 * */

CREATE TABLE TBL_MEMBER(
	ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
	MEMBER_ID VARCHAR2(1000) UNIQUE NOT NULL,
	MEMBER_PASSWORD NUMBER NOT NULL,
	MEMBER_NAME VARCHAR2(1000) NOT NULL,
	MEMBER_PHONE NUMBER NOT NULL,
	MEMBER_CLASS VARCHAR2(1000) DEFAULT 'BASIC'
);

CREATE TABLE TBL_OFFICE(
	ID NUMBER CONSTRAINT PK_OFFICE PRIMARY KEY,
	OFFICE_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CONFERENCE_ROOM(
	ID NUMBER CONSTRAINT PK_CONFERENCE_ROOM PRIMARY KEY,
	OFFICE_ID NUMBER,
	CONSTRAINT FK_CONFERENCE_ROOM_OFFICE FOREIGN KEY(OFFICE_ID)
	REFERENCES TBL_OFFICE(ID)
);

CREATE TABLE TBL_PART_TIME(
	ID NUMBER CONSTRAINT PK_PART_TIME PRIMARY KEY,
	CONFERENCE_ROOM_ID NUMBER,
	CONSTRAINT FK_PART_TIME_CONFERENCE_ROOM FOREIGN KEY(CONFERENCE_ROOM_ID)
	REFERENCES TBL_CONFERENCE_ROOM(ID)
);

CREATE TABLE TBL_RESERVATION(
	ID NUMBER CONSTRAINT PK_RESERVATION PRIMARY KEY,
	MEMBER_ID NUMBER,
	CONFERENCE_ROOM_ID NUMBER,
	CONSTRAINT FK_RESERVATION_MEMBER FOREIGN KEY(MEMBER_ID)
	REFERENCES TBL_MEMBER(ID),
	CONSTRAINT FK_RESERVATION_CONFERENCE_ROOM FOREIGN KEY(CONFERENCE_ROOM_ID)
	REFERENCES TBL_CONFERENCE_ROOM(ID)
);

/*

요구사항

유치원을 하려고 하는데, 아이들이 체험학습 프로그램을 신청해야 합니다.
아이들 정보는 이름, 나이, 성별이 필요하고 학부모는 이름, 나이, 주소, 전화번호, 성별이 필요해요
체험학습은 체험학습 제목, 체험학습 내용, 이벤트 이미지 여러 장이 필요합니다.
아이들은 여러 번 체험학습에 등록할 수 있어요.

*/

CREATE TABLE TBL_PARENT(
	ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
	PARENT_NAME VARCHAR2(1000) NOT NULL,
	PARENT_AGE NUMBER NOT NULL,
	PARENT_ADDRESS VARCHAR2(1000) NOT NULL,
	PARENT_PHONE NUMBER NOT NULL,
	PARENT_GENDER CHAR(1) DEFAULT 'N' CONSTRAINT BEN_GENDER CHECK(PARENT_GENDER IN('M', 'F'))
);

CREATE TABLE TBL_CHILDREN(
	ID NUMBER CONSTRAINT PK_CHILDREN PRIMARY KEY,
	CHILDREN_NAME VARCHAR2(1000) NOT NULL,
	CHILDREN_AGE NUMBER DEFAULT 5 NOT NULL,
	CHILDREN_GENDER CHAR(1) DEFAULT 'N' CONSTRAINT BEN_GENDER CHECK(CHILDREN_GENDER IN('M', 'F')),
	PARENT_ID NUMBER,
	CONSTRAINT FK_CHILDREN_PARENT FOREIGN KEY(PARENT_ID)
	REFERENCES TBL_PARENT(ID)
);

CREATE TABLE TBL_WORK_STUDY(
	ID NUMBER CONSTRAINT PK_WORK_STUDY PRIMARY KEY,
	WORK_STUDY_TITLE VARCHAR2(1000) UNIQUE NOT NULL,
	WORK_STUDY_CONTENT VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_EVENT_IMAGE(
	ID NUMBER CONSTRAINT PK_EVENT_IMAGE PRIMARY KEY,
	EVENT_IMAGE_ORIGENAL_NAME VARCHAR2(1000),
	EVENT_IMAGE_SYSTEM_NAME VARCHAR2(1000),
	WORK_STUDY_ID NUMBER,
	CONSTRAINT FK_EVENT_IMAGE_WORK_STUDY FOREIGN KEY(WORK_STUDY_ID)
	REFERENCES TBL_WORK_STUDY(ID)
);

CREATE TABLE TBL_APPLICATION(
	ID NUMBER CONSTRAINT PK_APPLICATION PRIMARY KEY,
	CHILDREN_ID NUMBER,
	WORK_STUDY_ID NUMBER,
	CONSTRAINT FK_APPLICATION_CHILDREN FOREIGN KEY(CHILDREN_ID)
	REFERENCES TBL_CHILDREN(ID),
	CONSTRAINT FK_APPLICATION_WORK_STUDY FOREIGN KEY(WORK_STUDY_ID)
	REFERENCES TBL_WORK_STUDY(ID)
);

/*

요구사항

안녕하세요, 광고 회사를 운영하려고 준비중인 사업가입니다.
광고주는 기업이고 기업 정보는 이름, 주소, 대표번호, 기업종류(스타트업, 중소기업, 중견기업, 대기업)입니다.
광고는 제목, 내용이 있고 기업은 여러 광고를 신청할 수 있습니다.
기업이 광고를 선택할 때에는 카테고리로 선택하며, 대카테고리, 중카테고리, 소카테고리가 있습니다.
기업종류를 만든다
기업정보를 만든다
*/

CREATE TABLE TBL_COMPANY_TYPE(
	ID NUMBER CONSTRAINT PK_COMPANY_TYPE PRIMARY KEY,
	COMPANY_TYPE_STARTUP VARCHAR2(1000) NOT NULL,
	COMPANY_TYPE_SMALL_BUSINESSES VARCHAR2(1000) NOT NULL,
	COMPANY_TYPE_MIDSIZE_COMPANY VARCHAR2(1000) NOT NULL,
	COMPANY_TYPE_MAJOR_CONPANY VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_ENTERPRISE(
	ID NUMBER CONSTRAINT PK_ENTERPRISE PRIMARY KEY,
	ENTERPRISE_NAME VARCHAR2(1000) NOT NULL,
	ENTERPRISE_ADDRESS VARCHAR2(1000) NOT NULL,
	ENTERPRISE_NUMBER NUMBER NOT NULL,
	COMPANY_TYPE_ID NUMBER,
	CONSTRAINT FK_ENTERPRISE_COMPANY_TYPE FOREIGN KEY(COMPANY_TYPE_ID)
	REFERENCES TBL_COMPANY_TYPE(ID)
);

CREATE TABLE TBL_ADVERTISING(
	ID NUMBER CONSTRAINT PK_ADVERTISING PRIMARY KEY,
	ADVERTISING_TITLE VARCHAR2(1000) NOT NULL,
	ADVERTISING_CONTENT VARCHAR2(1000) NOT NULL,
	ENTERPRISE_ID NUMBER,
	CATEGORY_A_ID NUMBER,
	CONSTRAINT FK_ADVERTISING_ENTERPRISE FOREIGN KEY(ENTERPRISE_ID)
	REFERENCES TBL_ENTERPRISE(ID),
	CONSTRAINT FK_ADVERTISING_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
	REFERENCES TBL_CATEGORY_A(ID)
);
ALTER TABLE TBL_ADVERTISING DROP COLUMN CATEGORY_A_ID;

CREATE TABLE TBL_CATEGORY_A(
	ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
	CATEGORY_A_NAME VARCHAR2(1000) NOT NULL
);
ALTER TABLE TBL_CATEGORY_A ADD ADVERTISING_ID NUMBER;
ALTER TABLE TBL_CATEGORY_A ADD CONSTRAINT FK_CATEGORY_A_ADVERTISING FOREIGN KEY(ADVERTISING_ID)
REFERENCES TBL_ADVERTISING(ID);

CREATE TABLE TBL_CATEGORY_B(
	ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
	CATEGORY_B_NAME VARCHAR2(1000) NOT NULL,
	CATEGORY_A_ID NUMBER,
	CONSTRAINT FK_CATEGORY_B_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
	REFERENCES TBL_CATEGORY_A(ID)
);

CREATE TABLE TBL_CATEGORY_C(
	ID NUMBER CONSTRAINT PK_CATEGORY_C PRIMARY KEY,
	CATEGORY_C_NAME VARCHAR2(1000) NOT NULL,
	CATEGORY_B_ID NUMBER,
	CONSTRAINT FK_CATEGORY_C_CATEGORY_B FOREIGN KEY(CATEGORY_B_ID)
	REFERENCES TBL_CATEGORY_B(ID)
);

/*

요구사항

음료수 판매 업체입니다. 음료수마다 당첨번호가 있습니다. 
음료수의 당첨번호는 1개이고 당첨자의 정보를 알아야 상품을 배송할 수 있습니다.
당첨 번호마다 당첨 상품이 있고, 당첨 상품이 배송 중인지 배송 완료인지 구분해야 합니다.

당첨			당첨자(회원)	배송			배송유무		음료수				
ID(PK)		ID(PK)		ID(PK)		ID(PK)		당첨번호
당첨자		이름			당첨(FK)		배송중		상품
			비번			배송유무(FK)	배송완료
			주소
											
*/

CREATE TABLE TBL_DRINK(
	ID NUMBER CONSTRAINT PK_DRINK PRIMARY KEY,
	DRINK_NAME VARCHAR2(1000) NOT NULL,
	DRINK_PRICE NUMBER DEFAULT 0,
	DRINK_WINNER_NUMBER NUMBER,
	DRINK_LOTTERY_NUMBER NUMBER,
	DRINK_PRIZE_FREEBIES VARCHAR2(1000)
);
ALTER TABLE TBL_DRINK ADD PRIZE_FREEBIES VARCHAR2(1000);
ALTER TABLE TBL_DRINK ADD DRINK_LOTTERY_NUMBER NUMBER;
ALTER TABLE TBL_DRINK RENAME COLUMN PRIZE_FREEBIES TO DRINK_PRIZE_FREEBIES;

CREATE TABLE TBL_PRIZE_WINNER(
	ID NUMBER CONSTRAINT PK_PRIZE_WINNER PRIMARY KEY,
	PRIZE_WINNER_NAME VARCHAR2(1000) NOT NULL,
	PRIZE_WINNER_PASSWORD NUMBER,
	PRIZE_WINNER_ADDRESS VARCHAR2(1000) NOT NULL,
	PRIZE_WINNER_PHONE NUMBER
);

CREATE TABLE TBL_PRIZE(
	ID NUMBER CONSTRAINT PK_PRIZE PRIMARY KEY,
	PRIZE_WINNER_ID NUMBER,
	DRINK_ID NUMBER,
	CONSTRAINT FK_PRIZE_PRIZE_WINNER FOREIGN KEY(PRIZE_WINNER_ID)
	REFERENCES TBL_PRIZE_WINNER(ID),
	CONSTRAINT FK_PRIZE_DRINK FOREIGN KEY(DRINK_ID)
	REFERENCES TBL_DRINK(ID)
);
ALTER TABLE TBL_PRIZE DROP COLUMN PRIZE_FREEBIES;

CREATE TABLE TBL_DELIVERY_STATUS(
	ID NUMBER CONSTRAINT PK_DELIVERY_STATUS PRIMARY KEY,
	DELIVERY_STATUS_STATUS VARCHAR2(1000) DEFAULT '배송을 준비하고 있습니다.' CONSTRAINT BAN_STATUS CHECK(DELIVERY_STATUS_STATUS IN('배송 중 입니다.', '배송이 완료되었습니다.'))
);
ALTER TABLE TBL_DELIVERY RENAME TO TBL_DELIVERY_STATUS;
ALTER TABLE TBL_DELIVERY RENAME COLUMN DELIVERY_STATUS TO DELIVERY_STATUS_STATUS;
ALTER TABLE TBL_DELIVERY_STATUS DROP CONSTRAINT PK_DELIVERY;
ALTER TABLE TBL_DELIVERY_STATUS ADD CONSTRAINT PK_DELIVERY_STATUS PRIMARY KEY(ID);

CREATE TABLE TBL_DELIVERY(
	ID NUMBER CONSTRAINT PK_DELIVERY PRIMARY KEY,
	PRIZE_WINNER_ID NUMBER,
	DELIVERY_STATUS_ID NUMBER,
	CONSTRAINT FK_DELIVERY_PRIZE_WINNER FOREIGN KEY(PRIZE_WINNER_ID)
	REFERENCES TBL_PRIZE_WINNER(ID),
	CONSTRAINT FK_DELIVERY_DELIVERY_STATUS FOREIGN KEY(DELIVERY_STATUS_ID)
	REFERENCES TBL_DELIVERY_STATUS(ID)
);
ALTER TABLE TBL_DELIVERY RENAME COLUMN USER_ID TO PRIZE_WINNER;
ALTER TABLE TBL_DELIVERY RENAME COLUMN PRIZE_WINNER TO PRIZE_WINNER_ID;
ALTER TABLE TBL_DELIVERY DROP CONSTRAINT FK_DELIVERY_USER;
ALTER TABLE TBL_DELIVERY ADD CONSTRAINT FK_DELIVERY_PRIZE_WINNER FOREIGN KEY(PRIZE_WINNER_ID) REFERENCES TBL_PRIZE_WINNER(ID);

CREATE TABLE TBL_SERCH(
	ID NUMBER CONSTRAINT PK_SERCH PRIMARY KEY,
	DELIVERY_ID NUMBER,
	PRIZE_ID NUMBER,
	CONSTRAINT FK_SERCH_DELIVERY FOREIGN KEY(DELIVERY_ID)
	REFERENCES TBL_DELIVERY(ID),
	CONSTRAINT FK_SERCH_PRIZE FOREIGN KEY(PRIZE_ID)
	REFERENCES TBL_PRIZE(ID)
);

/*

요구사항

이커머스 창업 준비중입니다. 기업과 사용자 간 거래를 위해 기업의 정보와 사용자 정보가 필요합니다.
기업의 정보는 기업 이름, 주소, 대표번호가 있고
사용자 정보는 이름, 주소, 전화번호가 있습니다. 결제 시 사용자 정보와 기업의 정보, 결제한 카드의 정보 모두 필요하며,
상품의 정보도 필요합니다. 상품의 정보는 이름, 가격, 재고입니다.
사용자는 등록한 카드의 정보를 저장할 수 있으며, 카드의 정보는 카드번호, 카드사, 회원 정보가 필요합니다.

			결제
			아이디
			기업
			사용자(카드)
			상품
			
기업정보		사용자정보		상품정보
아이디		아이디		아이디
이름			이름			이름
주소			주소			가겨
대표번호		전화번호		재고

			카드정보
			카드번호(ID)
			카드사
			회원
*/

CREATE TABLE TBL_CORPORATION(
	ID NUMBER CONSTRAINT PK_CORPORATION PRIMARY KEY,
	CORPORATION_NAME VARCHAR2(1000) NOT NULL,
	CORPORATION_ADDRESS VARCHAR2(1000) NOT NULL,
	CORPORATION_REPRESENTATIVE NUMBER UNIQUE
);

CREATE TABLE TBL_GOODS(
	ID NUMBER CONSTRAINT PK_GOODS PRIMARY KEY,
	GOODS_NAME VARCHAR2(1000) NOT NULL,
	GOODS_PRICE NUMBER DEFAULT 0,
	GOODS_STOCK NUMBER DEFAULT 0
);

ALTER TABLE TBL_USER ADD USER_NAME VARCHAR2(1000);
ALTER TABLE TBL_USER ADD USER_PHONE NUMBER;

CREATE TABLE TBL_CREDIT_CARD(
	ID NUMBER CONSTRAINT PK_CREDIT_CARD PRIMARY KEY,	
	CREDIT_CARD_NUMBER NUMBER UNIQUE,
	CREDIT_CARD_COMPANY VARCHAR2(1000) NOT NULL,
	USER_ID NUMBER,
	CONSTRAINT FK_CREDIT_CARD FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID)
);

CREATE TABLE TBL_PAYMENT(
	ID NUMBER CONSTRAINT PK_PAYMENT PRIMARY KEY,
	USER_ID NUMBER,
	CORPORATION_ID NUMBER,
	GOODS_ID NUMBER,
	CONSTRAINT FK_PAYMENT_USER FOREIGN KEY(USER_ID)
	REFERENCES TBL_USER(ID),
	CONSTRAINT FK_PAYMENT_CORPORATION FOREIGN KEY(CORPORATION_ID)
	REFERENCES TBL_CORPORATION(ID),
	CONSTRAINT FK_PAYMENT_GOODS FOREIGN KEY(GOODS_ID)
	REFERENCES TBL_GOODS(ID)
);
